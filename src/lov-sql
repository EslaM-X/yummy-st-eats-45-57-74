
-- إنشاء جدول الكوبونات
CREATE TABLE IF NOT EXISTS public.coupons (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  title TEXT NOT NULL,
  description TEXT,
  discount_type TEXT CHECK (discount_type IN ('percentage', 'fixed_amount')) NOT NULL,
  discount_value DECIMAL(10, 2) NOT NULL,
  minimum_order DECIMAL(10, 2) DEFAULT 0,
  max_uses INTEGER,
  used_count INTEGER DEFAULT 0,
  expires_at TIMESTAMP WITH TIME ZONE,
  is_active BOOLEAN DEFAULT true,
  created_by UUID REFERENCES auth.users(id),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- إنشاء جدول كوبونات المستخدمين
CREATE TABLE IF NOT EXISTS public.user_coupons (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  coupon_id UUID REFERENCES public.coupons(id) ON DELETE CASCADE NOT NULL,
  used_at TIMESTAMP WITH TIME ZONE,
  order_id UUID, -- reference to order when used
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(user_id, coupon_id)
);

-- إنشاء جدول المطاعم المعلقة للموافقة
CREATE TABLE IF NOT EXISTS public.pending_restaurants (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  name TEXT NOT NULL,
  description TEXT,
  address TEXT,
  phone TEXT,
  email TEXT,
  image_url TEXT,
  cuisine_type TEXT,
  owner_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  status TEXT CHECK (status IN ('pending', 'approved', 'rejected')) DEFAULT 'pending',
  admin_notes TEXT,
  reviewed_by UUID REFERENCES auth.users(id),
  reviewed_at TIMESTAMP WITH TIME ZONE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- إنشاء جدول الأطعمة المعلقة للموافقة
CREATE TABLE IF NOT EXISTS public.pending_foods (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  name TEXT NOT NULL,
  description TEXT,
  price DECIMAL(10, 2) NOT NULL,
  category TEXT,
  image_url TEXT,
  restaurant_id UUID,
  owner_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  status TEXT CHECK (status IN ('pending', 'approved', 'rejected')) DEFAULT 'pending',
  admin_notes TEXT,
  reviewed_by UUID REFERENCES auth.users(id),
  reviewed_at TIMESTAMP WITH TIME ZONE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- إنشاء جدول الإشعارات
CREATE TABLE IF NOT EXISTS public.notifications (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  title TEXT NOT NULL,
  message TEXT NOT NULL,
  type TEXT CHECK (type IN ('info', 'success', 'warning', 'error', 'coupon', 'approval')) NOT NULL,
  is_read BOOLEAN DEFAULT false,
  related_id UUID, -- can reference coupon_id, restaurant_id, etc.
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- إنشاء جدول إعدادات الإدارة
CREATE TABLE IF NOT EXISTS public.admin_settings (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  setting_key TEXT UNIQUE NOT NULL,
  setting_value TEXT,
  description TEXT,
  updated_by UUID REFERENCES auth.users(id),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- إدراج إعدادات افتراضية
INSERT INTO public.admin_settings (setting_key, setting_value, description) 
VALUES 
  ('auto_approve_restaurants', 'false', 'Auto approve restaurant registrations'),
  ('auto_approve_foods', 'false', 'Auto approve food submissions')
ON CONFLICT (setting_key) DO NOTHING;

-- تمكين RLS على جميع الجداول الجديدة
ALTER TABLE public.coupons ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_coupons ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.pending_restaurants ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.pending_foods ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.notifications ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.admin_settings ENABLE ROW LEVEL SECURITY;

-- سياسات للكوبونات
CREATE POLICY "Users can view active coupons" ON public.coupons
  FOR SELECT USING (is_active = true);

CREATE POLICY "Admins can manage coupons" ON public.coupons
  FOR ALL USING (
    EXISTS (
      SELECT 1 FROM public.profiles 
      WHERE id = auth.uid() AND user_type = 'admin'
    )
  );

-- سياسات لكوبونات المستخدمين
CREATE POLICY "Users can view own coupons" ON public.user_coupons
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can use own coupons" ON public.user_coupons
  FOR UPDATE USING (auth.uid() = user_id);

-- سياسات للمطاعم المعلقة
CREATE POLICY "Restaurant owners can view own submissions" ON public.pending_restaurants
  FOR SELECT USING (auth.uid() = owner_id);

CREATE POLICY "Users can submit restaurants" ON public.pending_restaurants
  FOR INSERT WITH CHECK (auth.uid() = owner_id);

CREATE POLICY "Admins can manage pending restaurants" ON public.pending_restaurants
  FOR ALL USING (
    EXISTS (
      SELECT 1 FROM public.profiles 
      WHERE id = auth.uid() AND user_type = 'admin'
    )
  );

-- سياسات للأطعمة المعلقة
CREATE POLICY "Food owners can view own submissions" ON public.pending_foods
  FOR SELECT USING (auth.uid() = owner_id);

CREATE POLICY "Users can submit foods" ON public.pending_foods
  FOR INSERT WITH CHECK (auth.uid() = owner_id);

CREATE POLICY "Admins can manage pending foods" ON public.pending_foods
  FOR ALL USING (
    EXISTS (
      SELECT 1 FROM public.profiles 
      WHERE id = auth.uid() AND user_type = 'admin'
    )
  );

-- سياسات للإشعارات
CREATE POLICY "Users can view own notifications" ON public.notifications
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can update own notifications" ON public.notifications
  FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Admins can create notifications" ON public.notifications
  FOR INSERT WITH CHECK (
    EXISTS (
      SELECT 1 FROM public.profiles 
      WHERE id = auth.uid() AND user_type = 'admin'
    )
  );

-- سياسات لإعدادات الإدارة
CREATE POLICY "Admins can manage settings" ON public.admin_settings
  FOR ALL USING (
    EXISTS (
      SELECT 1 FROM public.profiles 
      WHERE id = auth.uid() AND user_type = 'admin'
    )
  );

-- إنشاء فهارس لتحسين الأداء
CREATE INDEX IF NOT EXISTS idx_coupons_active ON public.coupons(is_active);
CREATE INDEX IF NOT EXISTS idx_user_coupons_user_id ON public.user_coupons(user_id);
CREATE INDEX IF NOT EXISTS idx_pending_restaurants_status ON public.pending_restaurants(status);
CREATE INDEX IF NOT EXISTS idx_pending_foods_status ON public.pending_foods(status);
CREATE INDEX IF NOT EXISTS idx_notifications_user_id ON public.notifications(user_id);
CREATE INDEX IF NOT EXISTS idx_notifications_is_read ON public.notifications(is_read);

-- دالة لإنشاء إشعار جديد
CREATE OR REPLACE FUNCTION public.create_notification(
  p_user_id UUID,
  p_title TEXT,
  p_message TEXT,
  p_type TEXT,
  p_related_id UUID DEFAULT NULL
)
RETURNS UUID
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  notification_id UUID;
BEGIN
  INSERT INTO public.notifications (user_id, title, message, type, related_id)
  VALUES (p_user_id, p_title, p_message, p_type, p_related_id)
  RETURNING id INTO notification_id;
  
  RETURN notification_id;
END;
$$;

-- دالة لتطبيق كوبون على طلب
CREATE OR REPLACE FUNCTION public.apply_coupon(
  p_user_id UUID,
  p_coupon_id UUID,
  p_order_total DECIMAL
)
RETURNS TABLE(
  success BOOLEAN,
  discount_amount DECIMAL,
  message TEXT
)
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  coupon_record RECORD;
  calculated_discount DECIMAL;
  user_coupon_exists BOOLEAN;
BEGIN
  -- التحقق من وجود الكوبون وصحته
  SELECT * INTO coupon_record
  FROM public.coupons
  WHERE id = p_coupon_id 
    AND is_active = true
    AND (expires_at IS NULL OR expires_at > NOW())
    AND (max_uses IS NULL OR used_count < max_uses);
  
  IF NOT FOUND THEN
    RETURN QUERY SELECT false, 0::DECIMAL, 'كوبون غير صالح أو منتهي الصلاحية'::TEXT;
    RETURN;
  END IF;
  
  -- التحقق من الحد الأدنى للطلب
  IF p_order_total < coupon_record.minimum_order THEN
    RETURN QUERY SELECT false, 0::DECIMAL, 
      ('الحد الأدنى للطلب هو ' || coupon_record.minimum_order::TEXT)::TEXT;
    RETURN;
  END IF;
  
  -- التحقق من استخدام المستخدم للكوبون من قبل
  SELECT EXISTS(
    SELECT 1 FROM public.user_coupons 
    WHERE user_id = p_user_id AND coupon_id = p_coupon_id
  ) INTO user_coupon_exists;
  
  IF user_coupon_exists THEN
    RETURN QUERY SELECT false, 0::DECIMAL, 'تم استخدام هذا الكوبون من قبل'::TEXT;
    RETURN;
  END IF;
  
  -- حساب قيمة الخصم
  IF coupon_record.discount_type = 'percentage' THEN
    calculated_discount := p_order_total * (coupon_record.discount_value / 100);
  ELSE
    calculated_discount := coupon_record.discount_value;
  END IF;
  
  -- التأكد من عدم تجاوز قيمة الخصم قيمة الطلب
  IF calculated_discount > p_order_total THEN
    calculated_discount := p_order_total;
  END IF;
  
  RETURN QUERY SELECT true, calculated_discount, 'تم تطبيق الكوبون بنجاح'::TEXT;
END;
$$;

-- منح الصلاحيات اللازمة
GRANT ALL ON public.coupons TO authenticated;
GRANT ALL ON public.user_coupons TO authenticated;
GRANT ALL ON public.pending_restaurants TO authenticated;
GRANT ALL ON public.pending_foods TO authenticated;
GRANT ALL ON public.notifications TO authenticated;
GRANT ALL ON public.admin_settings TO authenticated;
GRANT ALL ON public.coupons TO service_role;
GRANT ALL ON public.user_coupons TO service_role;
GRANT ALL ON public.pending_restaurants TO service_role;
GRANT ALL ON public.pending_foods TO service_role;
GRANT ALL ON public.notifications TO service_role;
GRANT ALL ON public.admin_settings TO service_role;
