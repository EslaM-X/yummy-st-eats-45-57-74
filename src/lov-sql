
-- Updated function to safely handle profile creation with better error handling
CREATE OR REPLACE FUNCTION public.create_profile_for_user()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path TO 'public'
AS $$
BEGIN
  -- Check if profile already exists to avoid duplicate key error
  IF EXISTS (SELECT 1 FROM public.profiles WHERE id = new.id) THEN
    -- Profile already exists, don't try to create it again
    RETURN new;
  END IF;

  INSERT INTO public.profiles (
    id, 
    email, 
    full_name, 
    username, 
    phone, 
    user_type
  )
  VALUES (
    new.id,
    new.email,
    COALESCE(new.raw_user_meta_data->>'full_name', ''),
    COALESCE(new.raw_user_meta_data->>'username', ''),
    COALESCE(new.raw_user_meta_data->>'phone', ''),
    COALESCE(new.raw_user_meta_data->>'user_type', 'customer')
  );

  RETURN new;
EXCEPTION
  WHEN unique_violation THEN
    -- In case of race condition, just continue - the profile already exists
    RETURN new;
  WHEN others THEN
    RAISE LOG 'Error in create_profile_for_user: %', SQLERRM;
    RETURN new; -- Still return new to not block signup, but log the error
END;
$$;

-- Make sure we have a trigger set up
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.create_profile_for_user();
